#!/usr/bin/env bash

function usage {
  bright="[37;1m"
  reset="[0m"
  cat <<EOF

${bright}tunnelize${reset}

Makes HTTP services bound to local ports, common in web development environments accessible on the
internet through a remote server, like a cheap vps that costs you 2$ per month. This allows you to
expose your server so that your web site or service can be accessed by colleagues, or receive
webhooks calls. Essentially, an open-soruce self-hosted alternative to services like ngrok and
serveo which have limited free usage.

tunnelize runs an instance of Caddy server on the remote server and uses the reverse port-forwarding
feature of the OpenSSH SSH Client to pipe connections from caddy to your locally-running service.

Thanks to Caddy server's awesome TLS features, certificate generation is done automatically through
Let's Encrypt. You can specify the email address that will be present in the TLS certificate,
although this is optional.

${bright}Usage: tunnelize [-e|--tls-email=email] user@host <expr> [<expr>] ...${reset}

<expr> is of the form: <local_url>@<remote_vhost>

Usage examples:
  tunnelize --tls-email me@myhost.com myuser@myhost.com \\
    localhost:8080@frontend.expose.myhost.com \\
    localhost:3000@backend.expose.myhost.com

tunnelize will have Caddy pipe connections from the given remote host to the local running service
bound to localhost:6000. The remote host will listen on https and http (which redirects to https).
The https certificate will be associated with the given email address.

${bright}Setting up the remote server$reset

The remote server needs to have Caddy server installed on it, available through the
caddy command. See the caddy server website on https://caddyserver.com/ for
installation instructions. As of the time of writing, this is a manual process.

The caddy command will also need the special capability to bind to ports 80 and 443,
unless you want to run the remote server as root, which is generally not advisable.
This can be done via the following command, as root:

  # setcap 'cap_net_bind_service=+ep' /usr/local/bin/caddy

Please mind that the location of the caddy command on your system may vary.

A domain name is also required so that your services can be properly exposed under a domain name. It
is recommended that you create a wildcard A/AAAA record under a subdomain so that you can easily
create exposed services on the fly. The usage example given would assume that such a DNS record
exists for *.expose.myhost.com, pointing to the remote host's IP address.
EOF
}

function error {
  echo "Error: $*" 1>&2
  exit 1
}

function test_setup {
  caddy -v > /dev/null 2>&1
  if [ $? == 127 ]; then
    error "caddy command not available on the remote server"
  fi
}

function ssh_connect {
  remote_vhost=$1
  tls_email=$2
  remote_port=$3
  forwards=$4

  caddy_config=''
  remote_ports=()
  reverse_proxies=()

  for forward in ${forwards[*]}; do
    if [[ $forward =~ (.+)@(.+) ]]; then
      local_url=${BASH_REMATCH[1]}
      remote_vhost=${BASH_REMATCH[2]}

      if ! (( ${#remote_ports[@]} )); then
        remote_ports+=('5000')
      else
        remote_ports+=($((${remote_ports[-1]} + 1000)))
      fi

      caddy_config="$caddy_config"$'\n'"$(parse_caddy_tmpl "$remote_vhost" "$tls_email" "${remote_ports[-1]}")"$'\n'
      reverse_proxies+=("-R ${remote_ports[-1]}:$local_url")
    else
      error "Unknown <expr>: $forward"
      exit 1
    fi
  done

  ssh -t -t "${reverse_proxies[@]}" "$host"  "$(typeset -f test_setup error) && test_setup && caddy -agree -conf <(echo '$caddy_config')"
}


function parse_caddy_tmpl {
  remote_vhost=$1
  tls_email=$2
  remote_port=$3

  CADDY_TMPL='http://{{remote_vhost}}/ {
  redir https://{host}{uri}
}

https://{{remote_vhost}}/ {
  tls {{tls_email}}

  proxy / http://localhost:{{remote_port}} {
    transparent
  }
}'

  echo "$CADDY_TMPL" | \
    sed -e "s|{{remote_vhost}}|$remote_vhost|g" -e "s|{{tls_email}}|$tls_email|" -e "s|{{remote_port}}|$remote_port|"
}

if [[ "$#" -lt 1 ]]; then
  usage
  exit 1
fi

forwards=()
while (( "$#" )); do
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -e|--tls-email)
      tls_email=$2
      shift 2
      ;;
    --)
      shift
      break
      ;;
    --*|-*)
      error "Unsupported flag $1" >&2
      ;;
    *)
      if [[ -z $host ]]; then
        host="$1"
      else
        forwards+=("$1")
      fi
      shift
      ;;
  esac
done

ssh_connect "$remote_vhost" "$tls_email" "$remote_port" "${forwards[@]}"
